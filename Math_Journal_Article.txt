Floating point numerals:


	What are floating point numbers?

Many people are aware of binary numerals, such as 1001 in binary representing
the number 9 in decimal. However, integers are not the only thing that binary
can represent. Binary can also represent rational numbers. "Floating point" is
typically used by computers to implement these rational numbers. They consist of
a mantissa and an exponent, very similar to scientific notation. However, these
are in binary.

One common type of floating point representation is known as "IEEE 754". These
will be used here. However, not all of the standard will be discussed, as it
also describes a lot of edge cases.

	The Single Precision Floating Point Number

One type described by the standard is a 32-bit wide floating point type, encoded
in binary (as opposed to BCD, binary coded decimal). This type is often referred
to as a "single precision floating point number", or simply the "float" (e.g.,
in C and languages derived from it). The 32 bits of its width comprise 1 sign
bit, which determines whether the number is positive or negative, 8 exponent
bits, which determine the power of 2 the number is multiplied by, and 23
mantissa (or "fraction") bits. They are arranged like this:

 X XXXXXXXX XXXXXXXXXXXXXXXXXXXXXXX
 S Exponent Mantissa
("S" for sign)

There are three things to be careful of. First, the exponent is shifted by 127.
That is, to express the number 1, which is 2^0, the exponent encoded is not 0,
but 127. Similarly, the number 2, which is 2^1, has an encoded exponent of 128.

The second thing to be careful of is the fact that the mantissa does not include
the leading 1. That is, to describe the number 3 (base 10), which is
1.1*(10)^(10) in binary, the leading 1 in 1.1 would be omitted. Also, the most
significant bit of the mantissa is the most significantly placed bit for its
encoding. So, the mantissa would be encoded as follows:
 10000000000000000000000

The third thing to be careful of is the sign bit. A zero sign bit means the
number is positive, and a one as a sign bit means the number is negative.

	Converting to a Floating Point Number

That seems all well and good, but how does one convert to a floating point
number? Well, if the number is already in binary, then it is easy enough. All
one has to do is find the position of the most significant "1" digit, and set
the exponent to that +127 (we will use 0-indexing in this article, so "1" has
a "1" bit in the 0th place). Then, set the mantissa to all the bits remaining to
the right of that "1" bit. If there are too many bits to fit, round to evens,
and if there are too few, then set the remaining mantissa bits to zero. Then all
that is left is to set the sign bit.

However, it is somewhat more difficult with decimal. One can divide or multiply
repeatedly by 2, keeping track of the number of times he does so, until the
number obtained is within [1,2). Then, he can add the number of times he divided
(or subtracting the number of times he multipled) from 127 to obtain the
exponent. With the remaining binary decimal, one can once again apply the
previously described method to get the mantissa of the binary floating point
number. The sign bit is the last part.

Another way is to first comvert the decimal number to binary, and apply the
method for converting binary numbers into floating point numbers.

Let's try an example, the number 5. This number is 101 in binary. First, we find
the position of the leftmost "1". That's 2. So, the exponent is 129 (127+2), or
10000001 in binary. Next, we throw that leftmost 1 away, leaving us with 01. We
put those in the mantissa, giving us 01 as the leftmost bits of the mantissa,
and then leave the rest of the bits as 0s (obtaining 01000000000000000000000).
Finally, we set the sign bit to zero, as the number 5 is positive. In the end,
we obtain the floating point number 01000000101000000000000000000000.


	Operations with Floating Point Numbers: Adding
Adding two floating point numbers is, compared to multiplication, relatively
easy. The first thing to to is to prepend a "1" to the beginning of the two
mantissas. Next, they have to be aligned. Also, the smaller of the floating
point numbers' mantissa must be negated, i.e., the 2's complement should be
taken on it. The mantissa of the floating point number with the smaller exponent
has to be shifted left until it aligns with the floating point number with the
larger exponent. Then, the mantissas are added with the usual binary addition.
The larger exponent is picked to be the exponent of the final binary number. If
the addition of the mantissas has a carry in the last place, then another 1 has
to be added to the exponent. Finally, the sign bit is the sign bit of the larger
of the two floating point numbers.

	Operations with Floating Point Numbers: Subtracting
Almost identical to adding, but the number being subtracted has its sign bit
flipped.

	Operations with Floating Point Numbers: Multiplying
Multiplying is a bit more difficult. First, the exponents must be turned into
their original form. For example, an exponent encoded as 131 must have 127
subtracted from it to become its original value of 4. Next, the exponents of
each number are added together. After that, a "1" is prepended to each of the
two mantissas, and they are multiplied in the binary manner. Any method is fine,
including long multiplication. After that, convert the result to a floating
point number using the previously described method, subtract 46 from the
exponent, and add the previously computed sum of exponents to the ecponent.
